name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: Run Bandit Security Linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
        
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        
    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json
        
    - name: Upload pip-audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  javascript-security:
    name: JavaScript Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install npm audit tools
      run: |
        npm install -g npm-audit-ci-wrapper
        npm install -g eslint-plugin-security
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Run ESLint Security Plugin
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --plugin security --rule "security/detect-object-injection: error" --format json --output-file eslint-security-report.json || true
        npx eslint . --ext .js,.jsx,.ts,.tsx --plugin security --rule "security/detect-object-injection: error" || true
        
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-report
        path: npm-audit-report.json
        
    - name: Upload ESLint security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-security-report
        path: eslint-security-report.json

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python quality tools
      run: |
        pip install flake8 pylint black isort
        
    - name: Run Black code formatter check
      run: black --check --diff .
      
    - name: Run isort import sorter check
      run: isort --check-only --diff .
      
    - name: Run Flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run Pylint
      run: pylint *.py || true
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Run ESLint for JavaScript
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json || true
        npx eslint . --ext .js,.jsx,.ts,.tsx || true
        
    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, javascript-security, dependency-check, code-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Security Summary
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Python Security (Bandit)" >> $GITHUB_STEP_SUMMARY
        if [ -f "bandit-security-report/bandit-report.json" ]; then
          echo "✅ Bandit scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Bandit scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### JavaScript Security (npm audit)" >> $GITHUB_STEP_SUMMARY
        if [ -f "npm-audit-report/npm-audit-report.json" ]; then
          echo "✅ npm audit completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ npm audit failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Dependency Vulnerabilities (Trivy)" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-results.sarif" ]; then
          echo "✅ Trivy scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Trivy scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
        echo "✅ Code quality checks completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **All security scans completed successfully!**" >> $GITHUB_STEP_SUMMARY
